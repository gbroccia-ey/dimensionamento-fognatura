import { Component,  OnInit } from '@angular/core';
import { Preventivo } from '../../../../models/preventivo';
import { Params } from '../../../../config/params';
import { BasePreventivatoreComponent } from '../../base-preventivatore/base-preventivatore';
import { NavController } from 'ionic-angular';
import { AlertController } from 'ionic-angular';
import { AdsService } from '../../../../services/ads-service';
/**
 * Generated class for the lavfat1181AcquaComponent component.
 *
 * See https://angular.io/docs/ts/latest/api/core/index/ComponentMetadata-class.html
 * for more info on Angular Components.
 */
@Component({
  selector: 'lavfat1181-acqua',
  templateUrl: 'lavfat1181-acqua.html'
})
export class Lavfat1181AcquaComponent extends BasePreventivatoreComponent implements OnInit, AfterViewInit{

  preventivo: Preventivo;
  tipo_spostamento: Array<Object>;
  valori: Object[] = [];
 



  constructor(public navCtrl: NavController, public alertCtrl: AlertController, public adsService: AdsService) {
    super(alertCtrl, adsService, navCtrl);
    this.preventivo = new Preventivo();
    this.tipo_spostamento = [];

    
  }



  ngOnInit() {
    if(this.ads.Preventivo) {
      this.preventivo = this.ads.Preventivo;
      }
      else {
        this.preventivo = new Preventivo();
        this.preventivo.Cer = 0;
        this.preventivo.Cvv = 0;
        this.preventivo.AltreSpese = 0;
        this.preventivo.NumeroAttacchi = 1;
        this.preventivo.TipoSpostamento = 1;
        this.preventivo.QuotaFissaNAttacchi = 0;
        
        
    }

    this.valori = Params.Valori.get("LAVFAT1181_ACQUA");
	this.valori.forEach(v => {
        this.tipo_spostamento.push({value: v["tipoSpostamento"], label: v["label"]});

    });

    this.updateQuotaFissa();

    
    
  }

  goToSlide(n) {

   

    this.slides.lockSwipes(false);
    this.slides.slideTo(n);
    this.slides.lockSwipes(true);

    

    if(n === 1) {

      if(this.preventivo.NumeroAttacchi === 0 || this.preventivo.QuotaFissaPrimoAttacco === 0) {
        alert("Occorre specificare il numero di attacchi e il Tipo Spostamento");
        this.goToSlide(0);
      }


      this.preventivo.QuotaFissaNAttacchi = Number(this.preventivo.NumeroAttacchi - 1) * Number(this.valori[0]["quotaFissaAggiuntiva"]); 
      this.preventivo.Totale = Number(this.preventivo.QuotaFissaNAttacchi) + Number(this.preventivo.QuotaFissaPrimoAttacco) +
                               Number(this.preventivo.Cop) + Number(this.preventivo.Cer) + Number( this.preventivo.Cvv) +
                               Number(this.preventivo.AltreSpese);
    
    }
    
  }

  ngAfterViewInit() {
    if(this.preventivo.Completato) {
        setTimeout(() => {
            this.goToSlide(1);

        }, 500);
        
      }
  }

  updateCer(result) {
    this.preventivo.Cer = result;
    this.aggiornaTotale();
  }
  
  updateCvv(result) {
    this.preventivo.Cvv = result;
    this.aggiornaTotale();
  }

  updateCop(res: any) {
    let result = res.result;
    if(typeof result === "string"){
      result.replace(",",".");
    }
    this.preventivo.Cop = +result;
    this.adsService.updateAds(this.ads, {CopInfo: res.copinfo}, () => {}, () => {});
    
    this.aggiornaTotale();
  }

}